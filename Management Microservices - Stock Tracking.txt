/**
 * Google Ads Script: Out-of-Stock Product Monitor
 * VERSION 2: MODIFIED FOR SEPARATE SUMMARY AND ID SHEETS
 * Monitors product inventory status across all campaigns and sends alerts for significant changes
 * 
 * Setup Instructions:
 * 1. Replace SPREADSHEET_URL with your actual spreadsheet URL
 * 2. Replace EMAIL_ADDRESS with your email
 * 3. Schedule this script to run weekly
 */

// Configuration
const SPREADSHEET_URL = 'SPREADSHEET_URL';
const EMAIL_ADDRESS = 'CSA AND CSM EMAILS';
const SUMMARY_SHEET_NAME = 'Inventory Summary';
const OOS_SHEET_NAME = 'Out of Stock IDs';
const ALERT_THRESHOLD = 0.10; // 10% increase threshold

function main() {
  try {
    console.log('Starting Out-of-Stock Product Monitor V2...');
    
    // Get current product and account data
    const productData = getProductInventoryData();
    const accountName = AdsApp.currentAccount().getName();
    const accountId = AdsApp.currentAccount().getCustomerId();
    
    // Open spreadsheet and get/create sheets
    const spreadsheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
    const summarySheet = spreadsheet.getSheetByName(SUMMARY_SHEET_NAME) || spreadsheet.insertSheet(SUMMARY_SHEET_NAME);
    const oosSheet = spreadsheet.getSheetByName(OOS_SHEET_NAME) || spreadsheet.insertSheet(OOS_SHEET_NAME);
    
    // Ensure headers are in place for both sheets
    setupSummarySheet(summarySheet);
    setupOutOfStockSheet(oosSheet);
    
    // Prepare current run's data
    const outOfStockCount = productData.outOfStockProducts.length;
    const totalProducts = productData.totalProducts;
    const outOfStockPercentage = totalProducts > 0 ? (outOfStockCount / totalProducts) : 0;
    
    const currentRunData = {
      timestamp: new Date(),
      accountId: accountId,
      accountName: accountName,
      totalProducts: totalProducts,
      outOfStockCount: outOfStockCount,
      outOfStockPercentage: outOfStockPercentage,
      outOfStockProductIDs: productData.outOfStockProducts 
    };
    
    // Add a new row to the summary sheet
    addSummaryData(summarySheet, currentRunData);
    
    // Overwrite the out-of-stock IDs sheet with the latest data
    populateOutOfStockSheet(oosSheet, currentRunData.outOfStockProductIDs);
    
    // Check for week-over-week increase and send alert if needed
    checkAndSendAlert(summarySheet, currentRunData);
    
    console.log(`Monitor completed. Total products: ${totalProducts}, Out of stock: ${outOfStockCount}`);
    
  } catch (error) {
    console.error('Error in main execution:', error.toString());
    MailApp.sendEmail(EMAIL_ADDRESS, `Script Error: Out-of-Stock Monitor`, `The script failed with error: ${error.toString()}`);
  }
}


function getProductInventoryData() {
  let totalProducts = 0;
  let outOfStockProducts = [];
  
  console.log('Fetching product data from all campaigns...');
  
  // Try using shopping_product resource which contains actual product data from Merchant Center
  try {
    const productQuery = `
      SELECT 
        shopping_product.merchant_center_id,
        shopping_product.item_id,
        shopping_product.title,
        shopping_product.availability,
        shopping_product.condition,
        shopping_product.channel
      FROM shopping_product 
      WHERE 
        shopping_product.channel = 'ONLINE'
    `;
    
    console.log('Executing shopping_product query...');
    const productReport = AdsApp.report(productQuery);
    const rows = productReport.rows();
    const processedProducts = new Set();
    
    while (rows.hasNext()) {
      const row = rows.next();
      const productId = row['shopping_product.item_id'];
      const availability = row['shopping_product.availability'];
      const title = row['shopping_product.title'];
      
      if (processedProducts.has(productId)) {
        continue;
      }
      
      processedProducts.add(productId);
      totalProducts++;
      
      // Check if product is out of stock
      if (availability === 'OUT_OF_STOCK' || availability === 'PREORDER') {
        outOfStockProducts.push(productId);
        console.log(`Out of stock product found: ${productId} - ${title}`);
      }
    }
    
    console.log(`Found ${totalProducts} products from shopping_product resource`);
    
  } catch (error) {
    console.log('Shopping product query failed:', error.toString());
    
    // Fallback: Try shopping_performance_view with correct fields
    try {
      console.log('Trying shopping_performance_view fallback...');
      
      const fallbackQuery = `
        SELECT 
          campaign.status,
          segments.product_item_id,
          segments.product_title,
          segments.product_custom_attribute0,
          segments.product_custom_attribute1
        FROM shopping_performance_view 
        WHERE 
          campaign.status = 'ENABLED'
          AND segments.date DURING LAST_7_DAYS
      `;
      
      const fallbackReport = AdsApp.report(fallbackQuery);
      const fallbackRows = fallbackReport.rows();
      const processedProducts = new Set();
      
      while (fallbackRows.hasNext()) {
        const row = fallbackRows.next();
        const productId = row['segments.product_item_id'];
        
        if (productId && !processedProducts.has(productId)) {
          processedProducts.add(productId);
          totalProducts++;
          
          // We can't directly get availability from this view, 
          // but we can check product custom attributes that might contain stock info
          const customAttr0 = row['segments.product_custom_attribute0'] || '';
          const customAttr1 = row['segments.product_custom_attribute1'] || '';
          
          if (customAttr0.toLowerCase().includes('out of stock') || 
              customAttr1.toLowerCase().includes('out of stock') ||
              customAttr0.toLowerCase().includes('unavailable') || 
              customAttr1.toLowerCase().includes('unavailable')) {
            outOfStockProducts.push(productId);
          }
        }
      }
      
      console.log(`Fallback found ${totalProducts} products from shopping_performance_view`);
      
    } catch (fallbackError) {
        console.log('Fallback query also failed:', fallbackError.toString());
        // In case of failure, we ensure we don't proceed with potentially zero data
        throw new Error('All attempts to fetch product data failed.');
    }
  }
  
  console.log(`Final result: ${totalProducts} total products, ${outOfStockProducts.length} out of stock`);
  
  return {
    totalProducts: totalProducts,
    outOfStockProducts: outOfStockProducts
  };
}


function setupSummarySheet(sheet) {
  const headers = ['Account ID', 'Account Name', 'Timestamp', 'Total Products', 'Products Out of Stock', '% Out of Stock'];
  const firstRow = sheet.getRange(1, 1, 1, headers.length).getValues()[0];
  
  // Check if headers are already correct
  if (firstRow.join('') !== headers.join('')) {
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]).setFontWeight('bold');
    sheet.autoResizeColumn(2); // Resize account name
    sheet.autoResizeColumn(3); // Resize timestamp
    console.log('Summary sheet headers created.');
  }
}

function setupOutOfStockSheet(sheet) {
  const header = 'Product ID';
  const firstCell = sheet.getRange(1, 1).getValue();

  if (firstCell !== header) {
    sheet.getRange(1, 1).setValue(header).setFontWeight('bold');
    sheet.autoResizeColumn(1);
    console.log('Out of Stock IDs sheet header created.');
  }
}


function addSummaryData(sheet, data) {
  const nextRow = sheet.getLastRow() + 1;
  const dataRow = [
    data.accountId,
    data.accountName,
    data.timestamp,
    data.totalProducts,
    data.outOfStockCount,
    data.outOfStockPercentage
  ];
  
  const range = sheet.getRange(nextRow, 1, 1, dataRow.length);
  range.setValues([dataRow]);
  // Format the percentage column
  sheet.getRange(nextRow, 6).setNumberFormat('0.00%');
  
  console.log(`Summary data added to spreadsheet at row ${nextRow}`);
}


function populateOutOfStockSheet(sheet, oosProductIds) {
  // Clear all previous data except for the header
  const lastRow = sheet.getLastRow();
  if (lastRow > 1) {
    sheet.getRange(2, 1, lastRow - 1, 1).clearContent();
  }
  
  if (oosProductIds && oosProductIds.length > 0) {
    // Format IDs for vertical writing
    const idsToWrite = oosProductIds.map(id => [id]);
    sheet.getRange(2, 1, idsToWrite.length, 1).setValues(idsToWrite);
    console.log(`Populated Out of Stock IDs sheet with ${oosProductIds.length} items.`);
  } else {
    console.log('No out-of-stock products to list.');
  }
}


function checkAndSendAlert(summarySheet, currentData) {
  try {
    const lastRowIndex = summarySheet.getLastRow();
    
    // Need at least 3 rows (header + 2 data rows) for a week-over-week comparison
    if (lastRowIndex < 3) {
      console.log('Not enough data for comparison yet.');
      return;
    }
    
    // Get the previous run's data from the second to last row
    const previousRow = summarySheet.getRange(lastRowIndex - 1, 1, 1, 5).getValues()[0];
    const previousOutOfStockCount = previousRow[4]; // Column 5: "Products Out of Stock"
    
    const currentOutOfStockCount = currentData.outOfStockCount;
    
    console.log(`Previous run out of stock count: ${previousOutOfStockCount}`);
    console.log(`Current run out of stock count: ${currentOutOfStockCount}`);
    
    // Calculate percentage increase
    if (previousOutOfStockCount > 0) {
      const percentageIncrease = (currentOutOfStockCount - previousOutOfStockCount) / previousOutOfStockCount;
      console.log(`Percentage change: ${(percentageIncrease * 100).toFixed(2)}%`);
      
      if (percentageIncrease >= ALERT_THRESHOLD) {
        sendAlert(currentData, previousOutOfStockCount, currentOutOfStockCount, percentageIncrease);
      }
    } else if (currentOutOfStockCount > 0) {
      // If previous run had 0 out of stock and now we have some, that's an alertable change
      console.log('Going from 0 to >0 out-of-stock products. Sending alert.');
      sendAlert(currentData, 0, currentOutOfStockCount, null);
    }
    
  } catch (error) {
    console.error('Error in checkAndSendAlert:', error.toString());
  }
}

function sendAlert(currentData, previousCount, currentCount, percentageIncrease) {
  const accountName = currentData.accountName;
  const increaseText = percentageIncrease !== null 
    ? `${(percentageIncrease * 100).toFixed(1)}%` 
    : 'from 0 (new out-of-stock products)';
  
  const subject = `🚨 Out-of-Stock Products Alert for ${accountName}: ${increaseText} increase`;
  
  const body = `
    <h2>Out-of-Stock Products Alert</h2>
    
    <p><strong>Account:</strong> ${accountName} (${currentData.accountId})</p>
    <p><strong>Alert Triggered:</strong> ${currentData.timestamp.toLocaleDateString()}</p>
    
    <h3>Week-over-Week Comparison:</h3>
    <ul>
      <li><strong>Previous Run:</strong> ${previousCount} products out of stock</li>
      <li><strong>Current Run:</strong> ${currentCount} products out of stock</li>
      <li><strong>Change:</strong> +${currentCount - previousCount} products (${increaseText} increase)</li>
    </ul>
    
    <h3>Current Out-of-Stock Overview:</h3>
    <ul>
      <li><strong>Total Products:</strong> ${currentData.totalProducts}</li>
      <li><strong>Out of Stock:</strong> ${currentCount} (${(currentData.outOfStockPercentage * 100).toFixed(2)}%)</li>
    </ul>
    
    <p>A full list of out-of-stock product IDs has been updated in the spreadsheet.
    <br>You can view it here: <a href="${SPREADSHEET_URL}">${SPREADSHEET_URL}</a></p>
    
    <h3>Action Required:</h3>
    <p>Please review your product inventory and consider:</p>
    <ul>
      <li>Restocking popular items</li>
      <li>Pausing ads for unavailable products</li>
      <li>Updating product availability in your merchant feed</li>
    </ul>
    
    <p><small>This alert was generated automatically by your Google Ads monitoring script.</small></p>
  `;
  
  try {
    MailApp.sendEmail({
      to: EMAIL_ADDRESS,
      subject: subject,
      htmlBody: body
    });
    
    console.log(`Alert email sent to ${EMAIL_ADDRESS}`);
  } catch (error) {
    console.error('Failed to send email alert:', error.toString());
  }
}